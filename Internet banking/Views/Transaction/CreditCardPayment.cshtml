@using IB.Core.Application.ViewModels.Transaction
@using IB.Core.Application.ViewModels.SavingsAccount
@using IB.Core.Application.ViewModels.CreditCard
@model SaveTransactionViewModel

@{
    ViewData["Title"] = "Pago de Tarjeta de Crédito";
    var savingsAccounts = ViewBag.SavingsAccounts as List<SavingsAccountViewModel>;
    var creditCards = ViewBag.CreditCards as List<CreditCardViewModel>;
}

<div class="container mt-5 w-50">
    <div class="card card-box-shadow">
        <div class="card-header bg-white">
            <h3>💳 Pago de Tarjeta de Crédito</h3>
        </div>
        <div class="card-body">
            @if (!string.IsNullOrEmpty(TempData["ErrorMessage"] as string))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <p>@TempData["ErrorMessage"]</p>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            <form method="post" asp-controller="Transaction" asp-action="CreditCardPayment">
                <input type="hidden" asp-for="UserId" />

                <!-- Selección de Tarjeta de Crédito -->
                <div class="mb-3">
                    <label asp-for="CreditCardId" class="form-label">Tarjeta de Crédito</label>
                    <select asp-for="CreditCardId" class="form-select" required>
                        <option value="">Seleccione una tarjeta</option>
                        @if (creditCards != null && creditCards.Any())
                        {
                            @foreach (var card in creditCards)
                            {
                                <option value="@card.Id" data-debt="@card.Debt">
                                    Tarjeta: @card.CardNumber - Deuda: @string.Format("{0:C}", card.Debt)
                                </option>
                            }
                        }
                        else
                        {
                            <option disabled>No tienes tarjetas de crédito registradas</option>
                        }
                    </select>
                    <span asp-validation-for="CreditCardId" class="text-danger"></span>
                </div>

                <!-- Selección de Cuenta de Origen -->
                <div class="mb-3">
                    <label asp-for="SavingsAccountId" class="form-label">Cuenta de Origen</label>
                    <select asp-for="SavingsAccountId" class="form-select" required>
                        <option value="">Seleccione una cuenta</option>
                        @if (savingsAccounts != null && savingsAccounts.Any())
                        {
                            @foreach (var account in savingsAccounts)
                            {
                                <option value="@account.Id">
                                    Cuenta: @account.AccountNumber - Saldo: @string.Format("{0:C}", account.Balance)
                                </option>
                            }
                        }
                        else
                        {
                            <option disabled>No tienes cuentas de ahorro registradas</option>
                        }
                    </select>
                    <span asp-validation-for="SavingsAccountId" class="text-danger"></span>
                </div>

                <!-- Monto a Pagar -->
                <div class="mb-3">
                    <label asp-for="Amount" class="form-label">Monto a Pagar</label>
                    <input type="number" asp-for="Amount" class="form-control" step="0.01" min="0.01" required />
                    <span asp-validation-for="Amount" class="text-danger"></span>
                </div>

                <div class="text-end mt-4">
                    <button type="submit" class="btn btn-primary">Continuar</button>
                    <a class="btn btn-secondary" asp-controller="Home" asp-action="Client">Cancelar</a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const amountInput = document.getElementById("Amount");
            const creditCardSelect = document.getElementById("CreditCardId");

            // Actualizar el monto máximo cuando se selecciona una tarjeta
            creditCardSelect.addEventListener("change", function () {
                let selectedOption = creditCardSelect.options[creditCardSelect.selectedIndex];
                let maxDebt = selectedOption.getAttribute("data-debt");
                amountInput.max = maxDebt;
            });

            // Validaciones antes de enviar el formulario
            document.querySelector("form").addEventListener("submit", function (event) {
                if (amountInput.value <= 0) {
                    event.preventDefault();
                    alert("El monto debe ser mayor a 0.");
                }
                if (parseFloat(amountInput.value) > parseFloat(amountInput.max)) {
                    event.preventDefault();
                    alert("No puedes pagar más de la deuda actual.");
                }
            });
        });
    </script>
}
